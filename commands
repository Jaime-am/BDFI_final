sudo dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375

https://github.com/Jaime-am/BDFI_final

#para saber la IP privada de cada contenedor
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' flask

#iniciar zookeeper en carpeta kafka
bin/zookeeper-server-start.sh config/zookeeper.properties

#iniciar kafka en carpeta kafka
bin/kafka-server-start.sh config/server.properties

#crear nuevo topic de kafka en carpeta kafka
bin/kafka-topics.sh \
      --create \
      --bootstrap-server localhost:9092 \
      --replication-factor 1 \
      --partitions 1 \
      --topic flight_delay_classification_request

#OPTIONAL para ver los mensajes en la cola de kafka
bin/kafka-console-consumer.sh \
    --bootstrap-server localhost:9092 \
    --topic flight_delay_classification_request \
    --from-beginning

#para lanzar el spark con Cassandra IMPORTANTE en carpeta ~/practica_big_data_2023_docker
spark-submit --class "es.upm.dit.ging.predictor.MakePrediction" --packages org.mongodb.spark:mongo-spark-connector_2.12:10.1.1,com.datastax.spark:spark-cassandra-connector_2.12:3.4.1,org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0 flight_prediction_onprem/target/scala-2.12/flight_prediction_2.12-0.1.jar
#en carpeta resources/web para lanzar web
export PROJECT_HOME=/home/kali/practica_big_data_2023
python3 predict_flask.py


#crear el keyspace en cassandra
CREATE KEYSPACE IF NOT EXISTS nombre_del_keyspace
  WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

#crear tabla
CREATE TABLE IF NOT EXISTS origin_dest_distances (
    Origin TEXT PRIMARY KEY,
    Dest TEXT,
    Distance DOUBLE
);

#crear tabla de flight_delay_classification_response
CREATE TABLE IF NOT EXISTS flight_delay_classification_response (
    Origin TEXT,
    DayOfWeek INT,
    DayOfYear INT,
    DayOfMonth INT,
    Dest TEXT,
    DepDelay DOUBLE,
    Timestamp TIMESTAMP,
    FlightDate DATE,
    Carrier TEXT,
    UUID UUID PRIMARY KEY,
    Distance INT,
    Route TEXT,
    Prediction INT
);
